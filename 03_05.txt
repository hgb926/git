## git
#### git의 사용 이유
 - 버전 관리
   - git의 핵심 기능, 각각의 변경사항을 '커밋'이라는 단위로 저장
   - 언제든지 특정 시점의 코드 상태로 돌아갈 수 있게 해준다.
 - 협업 도구
 - 코드의 안정성 유지
 - 코드 리뷰 및 추적
 - 배포 관리
 
   
   
---
## 기본 터미널 명령어
 - pwd
   - 현재 위치한 디렉토리 경로 출력
 - ls
   - 현재 위치한 디렉토리 안에 있는 폴더와 파일 목록 조회
 - cd (change director)
   - cd .. 상위 폴더 이동
   - cd + tab 이동할 수 있는 목록 출력
 - start .
   - 현재 위치한 폴더를 연다
 - mkdir (make directory)
   - 폴더 생성
 - touch
   - 파일 생성
 - rm 파일명
   - 파일 삭제하기
 - rm -rf 폴더명
   - 폴더 삭제하기 ( 폴더안에 모든 내용까지 함께 삭제됨 )
   
---

## Git Repository
git에 의해 관리되는 프로젝트 디렉터리.
 - 유형
   - 로컬 레포지토리 : 개발자의 컴퓨터에 저장된 레포지토리, 수정, 커밋생성
   - 원격 레포지토리 : 인터넷 상에 존재하는 레포지토리, 코드를 공유, 협업(gitHub)
   
---

## git 명령어
 - git status
   - 현재 레포지터리의 상태가 출력됨
 - git add
   - 변경된 파일들을 스테이징 영역에 추가하는데 사용. 커밋에 포함될 준비
 - git commit
   - git commit -m "your commit message" 커밋을 생성할 때는 해당 변경사항에 대한 설명을 담은 커밋메세지를 함께 작성
 - git log
   - 생성된 버전 정보 확인
 - git log --oneline
   - 한줄에 커밋 정보 확인
 - git commit --amend
   - 커밋메세지 수정 (커밋메세지 오타 직후에 사용)
 - .gitignore
   - 보안이 필요한 file은 gitignore텍스트 메모 안에 파일명을 적는다.
   - .git 폴더가 있는 디렉터리에 .gitignore 이라는 파일 생성
   - 이미 커밋된 파일에는 영향을 미치지 않는다.
   
 ## git에 업로드하기
 - gitHub에서 우측 상단 + 누르면 New repository 클릭
 - 저장소 이름을 지워준 뒤 Create repository 클릭
 - 원격 저장소가 생성, 주소 복사
 - git remote add
   - git remote add [별칭] [복사한 주소] (괄호는 작성 x)
 - git push origin master
 - git remote remove [별칭]
   - 원격 저장소 삭제 명령어
 - git remote rename [기존 별칭] [새 별칭]
 - git remote show [별칭]
   - 원격 저장소의 정보를 확인할때 사용하는 명령어
 - git remote -v
   - 추가된 원격 저장소의 목록을 확인할 때 사용하는 명령어